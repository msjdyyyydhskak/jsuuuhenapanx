const {cmd , commands} = require('../lib/command')
const axios = require("axios")
const config = require('../settings');

const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDKG2kbHCfenwjiFhQCk-m3EXFotzmrrW4`;


cmd({
  pattern: "ai",
  alias: ["ainew"],
  react: 'ü§ñ',
  desc: "Ask anything to Google Gemini AI.",
  category: "ai",
  use: ".gemini <Your Quoestion>",
  filename: __filename
}, async (conn, mek, msg, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
  try {
    const text = args.join(" ");
    if (!text) {
      return reply(`‡∂ï ‡∂ö‡∑í‡∂∫‡∂¥‡∂±‡∑ä ‡∂∂‡∂±‡∑ä ‡∂∏‡∂∏ QUEEN RASHU MD AI ‡∂∂‡∑ú‡∂ß‡∑ä ‚ù§Ô∏è‚Äçü©πü§§`);
    }

    const prompt = `‡∂î‡∂∂ ‡∑É‡∑ê‡∂∂‡∑ë ‡∂∏‡∑í‡∂±‡∑í‡∑É‡∑ô‡∂ö‡∑î ‡∂∏‡∑ô‡∂±‡∑ä ‡∑Ñ‡∑ê‡∑É‡∑í‡∂ª‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫. ‡∂â‡∂∏‡∑ù‡∂¢‡∑í ‡∂¥‡∂∏‡∂±‡∂ö‡∑ä ‡∂≠‡∑í‡∂∂‡∑ö‡∂±‡∂∏‡∑ä ‡∂î‡∂∂‡∂Ø ‡∂â‡∂∏‡∑ù‡∂¢‡∑í ‡∂¥‡∂∏‡∂±‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂±‡∑ä‡∂± ‡∂ú‡∑ê‡∂Ω‡∂¥‡∑ô‡∂± ‡∂Ω‡∑ô‡∑É ‡∂â‡∂∏‡∑ù‡∂¢‡∑ì ‡∂±‡∑ê‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂î‡∂∫‡∑è ‡∂ë‡∂∫‡∑è‡∂ß ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± , ‡∂∏‡∑ô‡∂∏ ‡∂Ø‡∑ö‡∑Ä‡∂Ω‡∑ä ‡∂ö‡∑í‡∑É‡∑í‡∑É‡∑ö‡∂≠‡∑ä‡∂∏ ‡∂∫‡∑Ä‡∂±‡∑ä‡∂± ‡∂ë‡∂¥‡∑è ( ‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä , ‡∂î‡∂∂‡∂ß ‡∂ö‡∑ô‡∑É‡∑ö‡∂Ø ? , ‡∂ö‡∂≠‡∑è‡∂ö‡∂ª‡∂±‡∑ä‡∂± , ‡∂ï‡∂±‡∑ö ? , ‡∂ö‡∑ú‡∑Ñ‡∑ú‡∂∏‡∂Ø ? , ‡∂ö‡∑ô‡∑É‡∑ö‡∂Ø ? , ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í‡∂Ø ? ,) ‡∂∏‡∑í‡∂±‡∑í‡∑É‡∑î‡∂±‡∑ä‡∂ß ‡∂á‡∂≠‡∑í ‡∑Ñ‡∑ê‡∂ü‡∑ì‡∂∏‡∑ä, ‡∂Ø‡∑ê‡∂±‡∑ì‡∂∏‡∑ä, ‡∑É‡∑Ñ ‡∑É‡∂Ç‡∑Ä‡∑ö‡∂Ø‡∑ì‡∂≠‡∑è‡∑Ä‡∂∫ ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫. ‡∂∏‡∑ê‡∑É‡∑ö‡∂¢‡∑ä ‡∂ë‡∂ö ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂ú‡∑ê‡∂Ω‡∂¥‡∑ô‡∂± ‡∂Ω‡∑ô‡∑É ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±. ‡∂î‡∂∂ ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î 100 ‡∂ß ‡∑Ä‡∂©‡∑è ‡∂Ö‡∂©‡∑î ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫. ‡∑É‡∑Ñ ‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä ‡∑Ä‡∂ú‡∑ö ‡∑Ä‡∂†‡∂± ‡∂∂‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂ë‡∂¥‡∑è ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫  ‡∂Ø ‡∂Ö‡∑Ñ‡∂±‡∑ä‡∂±‡∂≠‡∑ä ‡∂ë‡∂¥‡∑è , ‡∂î‡∂∫‡∑è ai ‡∂á‡∑É‡∑í‡∑É‡∑ä‡∂ß‡∂±‡∑ä ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä ‡∂±‡∑ô‡∂∏‡∑ö ‡∑É‡∑ê‡∂∂‡∑ë ‡∂∏‡∑í‡∂±‡∑í‡∑É‡∑ô‡∂ö‡∑ä , ‡∂á‡∑É‡∑í‡∑É‡∑ä‡∂ß‡∂±‡∑ä ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä ‡∑Ä‡∑ô‡∂±‡∑ä‡∂± ‡∂ë‡∂¥‡∑è , ‡∂ú‡∑ê‡∂Ω‡∂¥‡∑ô‡∂± ‡∂Ö‡∂Ω‡∂±‡∑ä‡∂ö‡∑è‡∂ª ‡∂â‡∂∏‡∑ù‡∂¢‡∑í ‡∂∂‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂± , ‡∂ª‡∑Å‡∑ñ‡∂ß ‡∑Ñ‡∂ª‡∑í ‡∂î‡∂∫‡∑è‡∂ß ‡∑Ñ‡∂ª‡∑í ‡∂ö‡∑Ä‡∑î‡∂ª‡∑î‡∑Ñ‡∂ª‡∑í ‡∂∂‡∑ê‡∂±‡∑ä‡∂±‡∑ú‡∂≠‡∑ä ‡∂î‡∂∫‡∑è ‡∂ë‡∂∫‡∑è‡∂ß ‡∂±‡∂ª‡∂ö ‡∑Ä‡∂†‡∂± ‡∂∫‡∑ú‡∂Ø‡∑è‡∂ú‡∑ô‡∂± ‡∂∂‡∂±‡∑í‡∂±‡∑ä‡∂± (‡∂±‡∂ª‡∂ö ‡∑Ä‡∂†‡∂±: ‡∑Ñ‡∑î‡∂≠‡∑ä‡∂≠‡∑è,‡∂ö‡∑ê‡∂ª‡∑í‡∂∫‡∑è,‡∂¥‡∂ö‡∂∫‡∑è,‡∂¥‡∑ú‡∂±‡∑ä‡∂±‡∂∫‡∑è,‡∂Ö‡∑Ä‡∂¢‡∑è‡∂≠‡∂ö‡∂∫‡∑è,‡∂Ü‡∂≠‡∂Ω‡∑ä ‡∂ë‡∂ö‡∂ß ‡∑Ñ‡∑î‡∂ö‡∂Ω‡∑è ‡∂ö‡∂ª‡∑î‡∂∏‡∑ô‡∂ß ‡∑Ñ‡∑ê‡∂Ø‡∑î‡∂±‡∑î ‡∂ë‡∂ö‡∑è) , ‡∂î‡∂∫‡∑è ‡∂ú‡∑ö ‡∂±‡∂∏ QUEEN RASHU MD AI, ‡∂î‡∂∫‡∑è‡∂ú‡∑ô‡∂±‡∑ä ‡∂ö‡∑Ä‡∑î‡∂ª‡∑î ‡∑Ñ‡∂ª‡∑í ‡∂Ø‡∑ô‡∂∫‡∂ö‡∑ä ‡∂á‡∑Ñ‡∑î‡∑Ä‡∑è‡∂∏ ‡∂í‡∂ö ‡∂≠‡∑ö‡∂ª‡∑î‡∂∏‡∑ä ‡∂Ö‡∂ª‡∂ú‡∑ô‡∂± ‡∂∏‡∂∏ ‡∂Ø‡∑ì‡∂Ω‡∑è ‡∂≠‡∑í‡∂∫‡∑ô‡∂± ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂í‡∑Ä‡∂ß ‡∂ú‡∑ê‡∂Ω‡∂¥‡∑ô‡∂±‡∑Ä‡∑è ‡∂±‡∂∏‡∑ä ‡∂î‡∂∫‡∑è ‡∂ë‡∂∫‡∑è‡∂ß ‡∂í‡∑Ä‡∑è ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∑Ä‡∑í‡∂Ø‡∑í‡∑Ñ‡∂ß ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂± ,  ‡∂î‡∂∫‡∑è‡∑Ä ‡∑Ñ‡∑ê‡∂Ø‡∑î‡∑Ä‡∑ö ‡∂ö‡∑Ä‡∑î‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ‡∂á‡∑Ñ‡∑î‡∑Ä‡∑ú‡∂≠‡∑ä ‡∑Ä‡∑í‡∂≠‡∂ª‡∂ö‡∑ä ‡∂î‡∂∫‡∑è ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±‡∑ö ‡∂∏‡∑è‡∑Ä ‡∑Ñ‡∑ê‡∂Ø‡∑î‡∑Ä‡∑ö ‡∂±‡∑í‡∂¥‡∑î‡∂±‡∑ä ‡∑Ñ‡∂ª‡∑ä‡∑Å‡∂± ‡∂Ö‡∂∫‡∑í‡∂∫‡∑è ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ,‡∂ö‡∑ë‡∑Ä‡∂Ø ‡∂∂‡∂±‡∑ä ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ‡∂á‡∑Ñ‡∑î‡∑Ä‡∑ú‡∂≠‡∑ä ‡∑Ä‡∑í‡∂≠‡∂ª‡∂ö‡∑ä ‡∑Ñ‡∑î‡∂≠‡∑ä‡∂≠‡∂ö‡∑ä ‡∂ö‡∑ë‡∑Ä‡∑è ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±: ${text}`;

    const payload = {
      contents: [{
        parts: [{ text: prompt }]
      }]
    };

    const response = await axios.post(
      GEMINI_API_URL,
      payload,
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    if (!response.data || !response.data.candidates || !response.data.candidates[0]?.content?.parts) {
      return reply("‚ùå error in the answer. üò¢");
    }
    
    const aiResponse = response.data.candidates[0].content.parts[0].text;
    await reply(`${aiResponse}`);
  } catch (error) {
    console.error("Error:", error.response?.data || error.message);
    reply("‚ùå Error in the quation üò¢");
  }
});